#include "mbed.h"
#include "nRF24L01P.h"

#define TRANSFER_SIZE   1
nRF24L01P my_nrf24l01p(PA_7, PA_6, PA_5, PD_14, D8, D7);
//static BufferedSerial bs(USBTX, USBRX);

// Blinking rate in milliseconds
DigitalOut myled1(LED1);
DigitalOut myled2(LED2);
DigitalOut myled3(LED3);
#define BLINKING_RATE_MS     100ms


// addresses
//#define MASTER_PIPE  NRF24L01P_PIPE_P0
//#define SLAVE1_PIPE  NRF24L01P_PIPE_P0
//#define SLAVE2_PIPE  NRF24L01P_PIPE_P1

//#define MASTER_TX_ADRESS  0xC2C2C2C2C2

void readOnPipe(int pipe) 
{
    int rxDataCnt = 0;    
    char rxData[TRANSFER_SIZE];    
    if ( my_nrf24l01p.readable(pipe) ) { 
        myled1 = !myled1;        
        rxDataCnt = my_nrf24l01p.read( pipe, rxData, sizeof( rxData ) );                
        if(rxDataCnt){
            printf("pipe: %d received:%d\n", pipe, rxData[0]);
            //if( pipe == NRF24L01P_PIPE_P0 )
            //else if( pipe == SLAVE1_TX_ADRESS )
            //    myled2 = !myled2;
            //else if ( pipe == SLAVE2_TX_ADRESS )
            //    myled3 = !myled3;
       }                
    }
}

// main() runs in its own thread in the OS
int main()
{
    //specifying address same as transmitter for pipe0 and pipe1
    long long RxAddress_PIPE0 = 0xC2C2C2C2C2;    
    long long RxAddress_PIPE1 = 0xE2E2E2E2E2;
    // 
    long long SLAVE1_TX_ADRESS = 0xC2C2C2C2C2;
    long long SLAVE2_TX_ADRESS = 0xE2E2E2E2E2;

    my_nrf24l01p.powerUp();
     my_nrf24l01p.setRfFrequency(2410);

     
    my_nrf24l01p.setRxAddress(SLAVE1_TX_ADRESS, DEFAULT_NRF24L01P_ADDRESS_WIDTH, NRF24L01P_PIPE_P0);
    my_nrf24l01p.setRxAddress(SLAVE2_TX_ADRESS, DEFAULT_NRF24L01P_ADDRESS_WIDTH, NRF24L01P_PIPE_P1);

    // Display the (default) setup of the nRF24L01+ chip
    printf( "nRF24L01+ Frequency    : %d MHz\r\n",  my_nrf24l01p.getRfFrequency() );
    printf( "nRF24L01+ Output power : %d dBm\r\n",  my_nrf24l01p.getRfOutputPower() );
    printf( "nRF24L01+ Data Rate    : %d kbps\r\n", my_nrf24l01p.getAirDataRate() );
   // printf( "nRF24L01+ TX Address   : 0x%010llX\r\n", my_nrf24l01p.getTxAddress() );
    printf( "nRF24L01+ RX Address1   : 0x%010llX\r\n", my_nrf24l01p.getRxAddress(NRF24L01P_PIPE_P0) );    
    printf( "nRF24L01+ RX Address2   : 0x%010llX\r\n", my_nrf24l01p.getRxAddress(NRF24L01P_PIPE_P1) );    

    my_nrf24l01p.setTransferSize( NRF24L01P_PIPE_P1, TRANSFER_SIZE );    
    my_nrf24l01p.setTransferSize( NRF24L01P_PIPE_P0, TRANSFER_SIZE );
    //my_nrf24l01p.setTransferSize( NRF24L01P_PIPE_P2, TRANSFER_SIZE );
 
    my_nrf24l01p.setReceiveMode();
    my_nrf24l01p.enable();
     
    //printf("--It is master!--\n");
    while (1) {       
        int rxDataCnt = 0;    
        char rxData[TRANSFER_SIZE];    
        if ( my_nrf24l01p.readable(NRF24L01P_PIPE_P0) ) { 
            myled1 = !myled1;        
            rxDataCnt = my_nrf24l01p.read( NRF24L01P_PIPE_P0, rxData, sizeof( rxData ) );                
            if(rxDataCnt){
                printf("pipe: %d received:%d\n", NRF24L01P_PIPE_P0, rxData[0]);
                //if( pipe == NRF24L01P_PIPE_P0 )
                //else if( pipe == SLAVE1_TX_ADRESS )
                //    myled2 = !myled2;
                //else if ( pipe == SLAVE2_TX_ADRESS )
                //    myled3 = !myled3;
            }                
        }
        if ( my_nrf24l01p.readable(NRF24L01P_PIPE_P1) ) { 
            myled2 = !myled2;
            rxDataCnt = my_nrf24l01p.read( NRF24L01P_PIPE_P1, rxData, sizeof( rxData ) );                
            if(rxDataCnt){
                printf("pipe: %d received:%d\n", NRF24L01P_PIPE_P1, rxData[0]);
                //if( pipe == NRF24L01P_PIPE_P0 )
                //else if( pipe == SLAVE1_TX_ADRESS )
                //    myled2 = !myled2;
                //else if ( pipe == SLAVE2_TX_ADRESS )
                //    myled3 = !myled3;
            }                
        }


        //readOnPipe(SLAVE1_PIPE);

        //readOnPipe(SLAVE2_PIPE);

        ThisThread::sleep_for(BLINKING_RATE_MS);
    }
}

